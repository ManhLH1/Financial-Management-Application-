# ============================================
# VERCEL ENV IMPORT SCRIPT
# ============================================
# Script n√†y gi√∫p import environment variables l√™n Vercel
# 
# C√°ch s·ª≠ d·ª•ng:
# 1. Copy file .env.local th√†nh .env.production
# 2. Update c√°c gi√° tr·ªã c·∫ßn thi·∫øt trong .env.production
# 3. Ch·∫°y script: .\import-env-to-vercel.ps1
# ============================================

Write-Host "üöÄ Vercel Environment Variables Import Script" -ForegroundColor Cyan
Write-Host "============================================" -ForegroundColor Cyan
Write-Host ""

# Ki·ªÉm tra file .env.production
if (-not (Test-Path ".env.production")) {
    Write-Host "‚ùå File .env.production kh√¥ng t·ªìn t·∫°i!" -ForegroundColor Red
    Write-Host "üìù T·∫°o file .env.production t·ª´ template..." -ForegroundColor Yellow
    
    if (Test-Path ".env.production.example") {
        Copy-Item ".env.production.example" ".env.production"
        Write-Host "‚úÖ ƒê√£ t·∫°o .env.production t·ª´ .env.production.example" -ForegroundColor Green
        Write-Host "‚ö†Ô∏è  Vui l√≤ng ƒëi·ªÅn c√°c gi√° tr·ªã trong .env.production v√† ch·∫°y l·∫°i script!" -ForegroundColor Yellow
        exit
    } else {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y .env.production.example" -ForegroundColor Red
        exit
    }
}

Write-Host "‚úÖ T√¨m th·∫•y file .env.production" -ForegroundColor Green
Write-Host ""

# ƒê·ªçc environment variables
$envVars = @{}
Get-Content ".env.production" | ForEach-Object {
    if ($_ -match '^([^#][^=]+)=(.+)$') {
        $key = $matches[1].Trim()
        $value = $matches[2].Trim()
        
        # B·ªè qua n·∫øu l√† placeholder
        if ($value -notmatch '^YOUR_|^your-') {
            $envVars[$key] = $value
        }
    }
}

Write-Host "üìã T√¨m th·∫•y $($envVars.Count) environment variables:" -ForegroundColor Cyan
$envVars.Keys | ForEach-Object {
    $displayValue = if ($envVars[$_].Length -gt 20) {
        $envVars[$_].Substring(0, 20) + "..."
    } else {
        $envVars[$_]
    }
    Write-Host "   - $_" -ForegroundColor White -NoNewline
    Write-Host " = $displayValue" -ForegroundColor Gray
}
Write-Host ""

# X√°c nh·∫≠n
$confirm = Read-Host "B·∫°n c√≥ mu·ªën th√™m c√°c bi·∫øn n√†y v√†o Vercel? (y/n)"
if ($confirm -ne 'y') {
    Write-Host "‚ùå H·ªßy b·ªè!" -ForegroundColor Red
    exit
}

Write-Host ""
Write-Host "üîß ƒêang th√™m environment variables v√†o Vercel..." -ForegroundColor Yellow
Write-Host ""

# Th√™m t·ª´ng bi·∫øn v√†o Vercel
$success = 0
$failed = 0

foreach ($key in $envVars.Keys) {
    Write-Host "‚ûï Th√™m $key..." -ForegroundColor White -NoNewline
    
    try {
        # Th√™m cho production
        $value = $envVars[$key]
        $env:VERCEL_ENV_VALUE = $value
        
        # S·ª≠ d·ª•ng echo ƒë·ªÉ pipe value v√†o vercel env add
        $result = echo $value | vercel env add $key production 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host " ‚úÖ" -ForegroundColor Green
            $success++
        } else {
            Write-Host " ‚ö†Ô∏è (C√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host " ‚ùå" -ForegroundColor Red
        $failed++
    }
}

Write-Host ""
Write-Host "============================================" -ForegroundColor Cyan
Write-Host "üìä K·∫øt qu·∫£:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Th√†nh c√¥ng: $success" -ForegroundColor Green
Write-Host "   ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i/L·ªói: $failed" -ForegroundColor Yellow
Write-Host ""

# H∆∞·ªõng d·∫´n ti·∫øp theo
Write-Host "üéØ C√°c b∆∞·ªõc ti·∫øp theo:" -ForegroundColor Cyan
Write-Host "   1. Ki·ªÉm tra env variables: vercel env ls" -ForegroundColor White
Write-Host "   2. Deploy production: vercel --prod" -ForegroundColor White
Write-Host "   3. Xem logs: vercel logs" -ForegroundColor White
Write-Host ""
Write-Host "üåê Dashboard: https://vercel.com/manhlhs-projects/financial-management-application/settings/environment-variables" -ForegroundColor Cyan
Write-Host ""
